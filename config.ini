[riverParameters]
# meanGradient: rad
# catchmentArea: km^2
# rainfallStartTime: 降雨開始時刻
# rainfallEndTime: 降雨終了時刻
# floodStartTime: 氾濫開始時刻(平常時よりも流量が大きくなる時刻)
# floodEndTime: 氾濫終了時刻(氾濫開始の流量より低くなる時刻)
# obsName: name of observation point {"atsumaohashi", "motsukisamu"}
# obsDateTime: observation date(3の倍数)
obsName = motsukisamu
forecastTime = 0
obsDateTime = 2014/09/11 00:00:00
forecast = None
# catchmentArea = 6.13  # 望月寒川
# catchmentArea = 238.4  # 厚真大橋
# rainfallStartTime = 2014/9/10 23:00:00
# rainfallEndTime = 2014/9/11 09:00:00
# floodStartTime = 2014/9/11 01:00:00
# floodEndTime = 2014/9/11 23:00:00

[optimizationParameters]
# flowModel: tankModel or classicOneValueStorageFunc or classicTwoValueStorageFunc
#            or twoStepTwoValueStorageFunc
# objFunction: rmse(root mean square error) or nash (Nash-Sutcliffe efficiency)
#              or chi (chi squared test) or None
# algorithm: de(differential evolution) or sceua or kalmanFilter or prediction
flowModel = classicTwoValueStorageFunc
objFunction = None
algorithm = kalmanFilter

[inputFile]
# timescale: {'minutes', 'hours', 'days', 'weeks'}
# e.g. num=2, timescale=hours -> download at 2 hours inteval
# used_rainfallData: data of rainfall {"sapporo amedas", "motsukisamu", "grib2",
#                                      "atsuma amedas"}
# used_waterLevelData: data of water level {"sapporo amedas", "motsukisamu", "atsumaohashi"}
# used_dailyFlowData: data of daily flow rate {"atsumaohashi"} if empty, not used in calc.
# timeInterval: time interval for the forecasted and/or obtained data
# rainfallInitialRefNum: reference number for rainfall data at the start calculation time
# rainfallInitialRefNum : 21=APCP
used_rainfallData = motsukisamu
used_waterLevelData = motsukisamu
used_flowRateData = motsukisamu
path = ./inputFiles/
startTime = 2014/09/10 21:00:00
endTime = 2014/09/11 09:00:00
# startTime = 2016/08/16 18:00:00
# endTime = 2016/08/17 00:00:00
timeInterval = 10
timescale = minutes
rainfallFileName1 = sapporo_rainfall_20140901_1hr.csv
rainfallFileName2 = 望月寒川雨量web_s9252014.csv
rainfallFileName3 = 望月寒川雨量Aﾛｶﾞｰ_e394.FR.201409010010-201409302400.csv
rainfallFileName4 = atsuma_rainfall_20140101_20141231_1day.csv
rainfallFileName5 = atsuma_rainfall_20140101_20141231_1hr.csv
rainfallFileName6 = 望月寒川雨量Aﾛｶﾞｰ_e394.FR.201608010010-201608312400.csv
rainfallFileName7 = motsukisamu_R_20160801_20160831_1hr.csv
waterLevelFileName1 = 望月寒川2014.xlsx
waterLevelFileName2 = 望月寒川水位Aﾛｶﾞｰ_e295.FH.201409010010-201409302400.csv
waterLevelFileName3 = 望月寒川水位Aﾛｶﾞｰ_e295.FH.201608010010-201608312400.csv
waterLevelFileName4 = motsukisamu_H_20160801_20160831_1hr.csv
flowRateFileName1 = M407.NQ.201401-201412.csv
flowRateFileName2 = M407.JQ.20140301-20141231.csv
rainfallInitialRefNum = 21

[HQparameters]
# H: water level, Q: flow rate(m^3/s), numHQ: number of the HQ equation
# range: H_min < H < H_max
# Q = a * (H - b)^2
numHQ = 3
H_min1 = 34.80
H_max1 = 34.90
a1 = 12.50
b1 = 34.80
H_min2 = 34.90
H_max2 = 35.06
a2 = 24.91
b2 = 34.83
H_min3 = 35.06
H_max3 = 36.88
a3 = 12.94
b3 = 34.74

[outputFile]
path = ./results/

[tankParameters]
alpha1 = 1.15
alpha2 = 7.57
alpha3 = 2.43
alpha4 = 4.70
beta1 = 3.13
beta2 = 2.38
beta3 = 0.64
height1 = 6.93
height2 = 71.0
height3 = 0.47
height4 = 32.5
storage1 = 0
storage2 = 0
storage3 = 0
# alpha1 = 0.1
# alpha2 = 0.15
# alpha3 = 0.05
# alpha4 = 0.01
# beta1 = 0.12
# beta2 = 0.05
# beta3 = 0.01
# height1 = 15
# height2 = 60
# height3 = 15
# height4 = 15
# storage1 = 0
# storage2 = 0
# storage3 = 0

[kalmanParameters]
# dimensionOfState: dimension of the state (number of state variables)
# dimensionOfObs: dimension of the observation (number of observed variables)
# dimensionOfControl: dimension of the control input
# One-order storage function: s = q^p1 + d(q^p2)/dt
# p1, p2: storage index for the storage function in averaged river of Hokkaido
dimensionOfState = 5
dimensionOfObs = 2
dimensionOfControl = 0
storageIndex1 = 0.6
storageIndex2 = 0.4648
# storageIndex1 = 0.38
# storageIndex2 = 0.1

[grib2TimeInterval]
# format
#    num ... number of time interval for the forecast
#    timescale: {'minutes', 'hours', 'days', 'weeks'}
#    total ... forecast time
# e.g. num=2, timescale=hours -> download at 2 hours inteval
# CAUTION: minimum interval is 10 minutes!
timescale = hours
num = 3
timeInterval = 1

[center_location]
# format
#    latitude  ... latitude of image's center location (separator: space)
#    longitude ... longitude of image's center location (separator: space)
latitude  = 43.05
longitude = 141.375
